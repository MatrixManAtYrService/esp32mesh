#include <WiFi.h>
#include <esp_now.h>
#include <esp_wifi.h> // Include for esp_wifi_set_channel

#define USE_DISPLAY true
#if USE_DISPLAY
  #include <TFT_eSPI.h>
  TFT_eSPI tft = TFT_eSPI();
  bool displayActive = false;
#endif

// Trusted MACs are now used for both receive and send authorization
// For simplicity, we are assuming all ESP32s in your network will be peers.
// Replace these with the actual MAC addresses of all your ESP32 nodes.
// Example: {0x14, 0x33, 0x5C, 0x06, 0x3A, 0x99} for 14:33:5C:06:3A:99
const uint8_t trustedMACs[][6] = {
  {0x08, 0xA6, 0xF7, 0x47, 0xFA, 0xAD}, // MAC of node A
  {0x14, 0x33, 0x5C, 0x6D, 0x74, 0x04},  // MAC of node B
  {0x14, 0x33, 0x5C, 0x06, 0x3A, 0x99}   // MAC of node C (your new one)
  // Add all other ESP32 MAC addresses here
};
const int numTrusted = sizeof(trustedMACs) / sizeof(trustedMACs[0]);


// Define a consistent channel for both SoftAP and ESP-NOW
// Channel 1 is a common default and good starting point.
const int WIFI_CHANNEL = 1;

WiFiServer server(80);
IPAddress IP;
String MAC, ssid; // MAC is the full MAC address of this ESP32
String serialBuffer = "";       // Stores messages, most recent on top
String userMessageBuffer = "";  // To hold the user-entered message from POST
String webFeedbackMessage = ""; // To send messages back to the web client (e.g., success/error)

unsigned long lastUpdate = 0;
int counter = 1;

// --- FORWARD DECLARATION for displayLastLines ---
// This tells the compiler that displayLastLines exists and its signature,
// even though its full definition comes later.
#if USE_DISPLAY
void displayLastLines(int numLines);
#endif
// --- END FORWARD DECLARATION ---


// Helper function to format a byte array MAC address into a String
String formatMac(const uint8_t *mac) {
  char buf[18];
  snprintf(buf, sizeof(buf), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  return String(buf);
}

// Callback function when ESP-NOW data is received
// No MAC filtering here; all received messages will be processed.
void onDataRecv(const esp_now_recv_info *recvInfo, const uint8_t *data, int len) {
  if (len <= 0 || len > 250) return; // Basic validation of message length

  String incoming;
  for (int i = 0; i < len; i++) incoming += (char)data[i];
  incoming.trim(); // Remove leading/trailing whitespace

  // Prepend new messages to buffer (most recent on top)
  // Simple duplicate prevention based on message content
  if (serialBuffer.indexOf(incoming) == -1) {
    serialBuffer = incoming + "\n" + serialBuffer;
    if (serialBuffer.length() > 4000) // Keep buffer from growing too large
      serialBuffer = serialBuffer.substring(0, 4000); // Take the most recent 4000 chars
    Serial.println("Message received: " + incoming);

#if USE_DISPLAY
    if (displayActive) displayLastLines(22); // Call after declaration now
#endif
  }
}

// Sends a message to all trusted ESP-NOW peers
void sendToAllPeers(const String &message) {
  for (int i = 0; i < numTrusted; i++) {
    esp_err_t result = esp_now_send(trustedMACs[i], (uint8_t*)message.c_str(), message.length());
    if (result != ESP_OK)
      Serial.printf("Send to %s failed (err %d)\n", formatMac(trustedMACs[i]).c_str(), result);
    else
      Serial.printf("Sent to %s: %s\n", formatMac(trustedMACs[i]).c_str(), message.c_str());
  }
}

void setup() {
  Serial.begin(115200);

  // Set up WiFi as Access Point + Station (for ESP-NOW and serving web page)
  WiFi.mode(WIFI_AP_STA);
  // Disable WiFi sleep to ensure ESP-NOW can always receive packets
  WiFi.setSleep(false);

  // --- Explicitly configure SoftAP channel and ensure consistency ---
  // Step 1: Set a temporary AP to get the MAC address.
  // We use the WIFI_CHANNEL constant here from the start.
  WiFi.softAP("placeholder", nullptr, WIFI_CHANNEL);
  delay(100);
  MAC = WiFi.softAPmacAddress(); // Get our own MAC address

  String macCleanForSsid = MAC;
  macCleanForSsid.replace(":", "");
  String macSuffixForSsid = macCleanForSsid.substring(macCleanForSsid.length() - 4);
  ssid = "ProtestInfo_" + macSuffixForSsid;

  // Step 2: Configure the actual SoftAP with the unique SSID and the chosen channel.
  // This is the definitive setting for the SoftAP channel.
  WiFi.softAP(ssid.c_str(), nullptr, WIFI_CHANNEL);
  IP = WiFi.softAPIP(); // Get the IP address of our AP
  server.begin(); // Start the web server

  // Step 3: Crucially, ensure the underlying Wi-Fi station interface (used by ESP-NOW)
  // is also locked to the same channel. This helps avoid internal channel conflicts.
  esp_wifi_set_channel(WIFI_CHANNEL, WIFI_SECOND_CHAN_NONE);

#if USE_DISPLAY
  tft.begin();
  tft.setRotation(1); // Adjust for your specific display orientation
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  tft.setTextSize(1);
  tft.setCursor(0, 0);
  tft.println("Starting node...");
  displayActive = true;
  Serial.println("Display initialized");
#endif

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    return; // Cannot proceed without ESP-NOW
  }

  // Add trusted peers for sending messages
  for (int i = 0; i < numTrusted; i++) {
    esp_now_del_peer(trustedMACs[i]); // Remove if already exists
    esp_now_peer_info_t peer{}; // Use aggregate initialization for clarity
    memcpy(peer.peer_addr, trustedMACs[i], 6);
    // Peer channel MUST match the SoftAP channel (WIFI_CHANNEL)
    peer.channel = WIFI_CHANNEL;
    peer.encrypt = false;  // No encryption for simplicity in this example
    esp_err_t result = esp_now_add_peer(&peer);
    if (result == ESP_OK)
      Serial.println("Peer added: " + formatMac(trustedMACs[i]));
    else
      Serial.printf("Failed to add peer %s (err %d)\n", formatMac(trustedMACs[i]).c_str(), result);
  }

  // Register the receive callback function
  esp_now_register_recv_cb(onDataRecv);
}

void loop() {
  // Periodically send an auto-generated message (if no user message is pending)
  if (millis() - lastUpdate >= 5000) {
    lastUpdate = millis();
    char messageID[9];
    snprintf(messageID, sizeof(messageID), "%08X", esp_random()); // Generate random ID

    String macCleanForMsg = MAC;
    macCleanForMsg.replace(":", "");
    String macSuffixForMsg = macCleanForMsg.substring(macCleanForMsg.length() - 4); // For auto-generated messages

    // Only send the automatically generated message if there's no user input pending
    if (userMessageBuffer.length() == 0) {
      char msg[128];
      // Auto-generated messages indicate they are from this node's MAC suffix
      snprintf(msg, sizeof(msg), "[%s] Node %s - \"Auto Message %d\"", messageID, macSuffixForMsg.c_str(), counter);

      // Prepend new messages to buffer (most recent on top)
      if (serialBuffer.indexOf("[" + String(messageID) + "]") == -1) { // Prevent adding if already there
        serialBuffer = String(msg) + "\n" + serialBuffer; // Prepend here
        Serial.println("Sending (Auto): " + String(msg));
        counter++;

        if (serialBuffer.length() > 4000) // Keep buffer manageable
          serialBuffer = serialBuffer.substring(0, 4000); // Truncate from the end

        sendToAllPeers(msg); // Send via ESP-NOW

#if USE_DISPLAY
        if (displayActive) displayLastLines(22); // Call after declaration now
#endif
      }
    }
  }

  // Handle incoming HTTP client requests
  WiFiClient client = server.available();
  if (client) {
    String currentLine = "";
    String postBody = "";
    bool isPost = false;
    unsigned long clientTimeout = millis(); // Timeout for reading client data
    int contentLength = 0; // To store Content-Length for POST requests

    // Read the client's request line by line
    while (client.connected() && (millis() - clientTimeout < 2000)) { // Timeout after 2 seconds of inactivity
      if (client.available()) {
        clientTimeout = millis(); // Reset timeout as long as data is coming in
        char c = client.read();
        if (c == '\n') {
          // If the current line is blank, we've reached the end of the HTTP headers
          if (currentLine.length() == 0) {
            if (isPost) {
              // Read the POST body based on Content-Length (important for proper parsing)
              for (int i = 0; i < contentLength && client.available(); i++) {
                postBody += (char)client.read();
              }
              Serial.println("Received POST Body: " + postBody);

              // Parse the POST body for message parameter
              String messageParam = "";
              int messageStart = postBody.indexOf("message=");
              if (messageStart != -1) {
                int messageEnd = postBody.indexOf('&', messageStart);
                if (messageEnd == -1) messageEnd = postBody.length(); // If '&' not found, it's the end
                messageParam = postBody.substring(messageStart + 8, messageEnd);
              }

              // --- URL DECODING FOR MESSAGE ---
              messageParam.replace('+', ' '); // Replace '+' with spaces from URL encoding
              String decodedMessage = "";
              for (int i = 0; i < messageParam.length(); i++) {
                if (messageParam.charAt(i) == '%' && (i + 2) < messageParam.length()) {
                  // Convert hex to character
                  char decodedChar = (char)strtol((messageParam.substring(i + 1, i + 3)).c_str(), NULL, 16);
                  decodedMessage += decodedChar;
                  i += 2; // Skip the two hex characters
                } else {
                  decodedMessage += messageParam.charAt(i);
                }
              }
              
              // --- Validation Logic (simplified: only check for empty message) ---
              if (decodedMessage.length() == 0) {
                webFeedbackMessage = "<p class='feedback' style='color:orange;'>Please enter a message.</p>";
              } else {
                userMessageBuffer = decodedMessage; // Store message for ESP-NOW sending
                webFeedbackMessage = "<p class='feedback' style='color:green;'>Message queued for sending!</p>";
                Serial.println("User message received from web: " + userMessageBuffer);
              }
            } // End if (isPost)

            // --- Send HTTP Response (always send the page back) ---
            client.println(F("HTTP/1.1 200 OK"));
            client.println(F("Content-type:text/html"));
            client.println(F("Connection: close")); // Close connection after response
            client.println(); // Blank line signals end of headers

            client.println(F("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">"));
            client.println(F("<style>"));
            client.println(F("body{font-family:Helvetica, Arial, sans-serif;margin:0;padding:0;background-color:#f8f8f8;color:#333;}"));
            client.println(F("header{background-color:#f0f0f0;padding:10px 0;border-bottom:1px solid #ddd;}"));
            client.println(F("h1, h2, h3 {margin:0;padding:5px 0;color:#333;text-align:center;}"));
            client.println(F("h1{font-size:1.4em;}"));
            client.println(F("h2{font-size:1.2em;}"));
            client.println(F("h3{font-size:1.1em;margin-bottom:10px;}"));
            client.println(F("p{margin:3px 0;font-size:0.9em;text-align:center;}"));
            client.println(F(".info-line{font-size:0.8em;color:#666;margin-bottom:10px;}")); // For IP/MAC info
            client.println(F("pre{background:#eee;padding:10px;border-radius:5px;text-align:left;max-width:90%;margin:15px auto;overflow-x:auto;white-space:pre-wrap;word-wrap:break-word;font-size:0.85em;border:1px solid #ccc;}"));
            
            // Form specific styles
            client.println(F("details{background:#fff;padding:15px;border-radius:8px;box-shadow:0 2px 5px rgba(0,0,0,0.1);max-width:450px;margin:15px auto;border:1px solid #ddd;}"));
            client.println(F("summary{font-size:1.1em;font-weight:bold;cursor:pointer;padding:5px 0;text-align:center;}"));
            client.println(F("form{display:flex;flex-direction:column;align-items:center;margin-top:10px;}"));
            client.println(F("label{font-size:0.9em;margin-bottom:5px;align-self:flex-start;width:80%;}"));
            client.println(F("input[type=text]{width:80%;max-width:350px;padding:8px;margin-bottom:10px;border-radius:4px;border:1px solid #ccc;font-size:0.9em;}"));
            client.println(F("input[type=submit]{background-color:#007bff;color:white;padding:8px 15px;border:none;border-radius:4px;cursor:pointer;font-size:1em;transition:background-color 0.3s ease;}"));
            client.println(F("input[type=submit]:hover{background-color:#0056b3;}"));
            
            // Feedback messages
            client.println(F("p.feedback {font-weight: bold; margin: 10px auto; padding: 8px; border-radius: 5px; border: 1px solid; max-width: 90%; text-align: center; font-size: 0.9em;}"));
            client.println(F("p.feedback[style*='color:green'] { background-color: #e6ffe6; border-color: #00cc00;}"));
            client.println(F("p.feedback[style*='color:red'] { background-color: #ffe6e6; border-color: #cc0000;}"));
            client.println(F("p.feedback[style*='color:orange'] { background-color: #fff8e6; border-color: #ff9900;}"));
            client.println(F("</style></head><body>"));

            client.println(F("<header>"));
            client.println(F("<h1>Protest Information Node</h1>"));
            client.println(F("<p>This node is part of a mesh network. Information may be delayed.</p>"));
            
            // --- Display only the last four HEX characters of the MAC address on the webpage ---
            String macForWebDisplay = MAC;
            macForWebDisplay.replace(":", "");
            String macSuffixForDisplay = macForWebDisplay.substring(macForWebDisplay.length() - 4);

            client.printf("<p class='info-line'><strong>IP:</strong> %s | <strong>MAC:</strong> %s</p>", IP.toString().c_str(), macSuffixForDisplay.c_str());
            client.println(F("</header>"));

            // Display feedback message from server processing
            if (webFeedbackMessage.length() > 0) {
              client.println(webFeedbackMessage);
              webFeedbackMessage = ""; // Clear for next request
            }
            
            client.println(F("<h2>Serial Data Log:</h2><pre>"));
            client.print(serialBuffer); // This will naturally show most recent on top
            client.println(F("</pre>"));

            // --- Collapsible Text input form ---
            client.println(F("<details>"));
            client.println(F("<summary>Send Message</summary>")); // Clickable summary
            client.println(F("<h3>Send a New Message:</h3>")); // Adjusted heading size for form
            client.println(F("<form action=\"/\" method=\"POST\">"));
            client.println(F("<label for=\"message_input\">Message:</label>"));
            client.println(F("<input type=\"text\" id=\"message_input\" name=\"message\" placeholder=\"Enter your message here\" required maxlength=\"200\">"));
            // Removed the MAC input field entirely
            client.println(F("<input type=\"submit\" value=\"Send Message\">"));
            client.println(F("</form>"));
            client.println(F("</details>"));
            // --- End Collapsible Text input form ---

            client.println(F("</body></html>"));
            break; // Exit while loop after sending response
          } else { // Reading HTTP headers
            // Check for GET or POST request method
            if (currentLine.startsWith("GET")) {
              isPost = false;
            } else if (currentLine.startsWith("POST")) {
              isPost = true;
            }
            // Look for Content-Length header for POST requests
            int contentLengthIndex = currentLine.indexOf("Content-Length: ");
            if (contentLengthIndex != -1) {
              contentLength = currentLine.substring(contentLengthIndex + 16).toInt();
            }
            currentLine = ""; // Clear currentLine for the next header
          }
        } else if (c != '\r') {
          currentLine += c; // Build up the current line
        }
      }
    }
    client.stop(); // Close the connection when done or timed out
  }

  // --- Process User Message (if successfully validated from the web interface) ---
  if (userMessageBuffer.length() > 0) {
    char messageID[9];
    snprintf(messageID, sizeof(messageID), "%08X", esp_random()); // Unique ID for this message

    String macCleanForMsg = MAC;
    macCleanForMsg.replace(":", "");
    String macSuffixForMsg = macCleanForMsg.substring(macCleanForMsg.length() - 4);

    // User-sent messages now indicate they are from "User via Node [MAC suffix]"
    String messageToSend = "[" + String(messageID) + "] User via Node " + macSuffixForMsg + " - " + userMessageBuffer;

    // Prepend new messages to serialBuffer (most recent on top) and send via ESP-NOW
    if (serialBuffer.indexOf("[" + String(messageID) + "]") == -1) { // Prevent adding if already there
      serialBuffer = messageToSend + "\n" + serialBuffer; // Prepend here
      Serial.println("Broadcasting (User): " + messageToSend);

      if (serialBuffer.length() > 4000) // Keep buffer manageable
        serialBuffer = serialBuffer.substring(0, 4000); // Truncate from the end

      sendToAllPeers(messageToSend); // Broadcast the message

#if USE_DISPLAY
      if (displayActive) displayLastLines(22); // Call after declaration now
#endif
    }
    userMessageBuffer = ""; // Clear the buffer after processing
  }
}

// Displays the most recent N lines of the serialBuffer on the TFT display
// The full definition of the function appears here.
#if USE_DISPLAY
void displayLastLines(int numLines) {
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(TFT_CYAN);    tft.println("MAC: " + MAC); // Full MAC on display
  tft.setTextColor(TFT_GREEN);  tft.println("IP: " + IP.toString());
  tft.setTextColor(TFT_WHITE);  tft.println("----------------------");

  // Since serialBuffer has most recent on top, we just print from the beginning
  int linesPrinted = 0;
  int lineStart = 0;
  while (linesPrinted < numLines && lineStart < serialBuffer.length()) {
    int lineEnd = serialBuffer.indexOf('\n', lineStart);
    if (lineEnd == -1) lineEnd = serialBuffer.length(); // Last line
    String line = serialBuffer.substring(lineStart, lineEnd);
    tft.println(line);
    lineStart = lineEnd + 1;
    linesPrinted++;
  }
}
#endif
